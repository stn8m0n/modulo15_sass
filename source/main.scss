@use 'config/reset.scss';
@use 'config/variaveis.scss';
@use 'sass:math';

@mixin elementoForm ($margin: 16px){
    padding: 8px;
    display: block;
    width: 100%;
    margin-bottom: $margin;
}

@function pixelParaEm ($alvoEmPixel, $contextoEmPixel: 16px){
    @return math.div($alvoEmPixel, $contextoEmPixel)+em;
}

body{
    background-color: variaveis.$corDeFundo;
}

.container{
    max-width: 1024px;
    width: 100%;
    margin: 0 auto;
}

header{
    padding: 16px 0;
    background-color: variaveis.$corPrincipal;
    text-align: center;
    color: #fff;
}

.form-container{
    height: calc(100vh - 70px); //100vh = 100% view port height - 70px header
    display: flex;
    flex-direction: column;
    align-items: center;
    justify-content: center;
    max-width: 760px;

    h2{
        font-size: pixelParaEm(48px);
        text-align: center;
    }

    form{
        width: 100%;
        max-width: 480px;
        margin-top: 40px;


        input{
            @include elementoForm();
            background-color: transparent;
            border: none;
            border-bottom: 2px solid variaveis.$corPrincipal;
        }

        button{
            @include elementoForm();
            background-color: variaveis.$corSecundaria;
            border: none;
            cursor: pointer;
            font-size: 18px;
            font-weight:bold;
            color: #fff;

            &:hover{
                background-color: darken(variaveis.$corSecundaria, 18px); // para deixar mais claro lighten
            }

        }
    }
    
}

@media screen and (max-width: variaveis.$mobile) {
    .container{
        max-width: 80%;
    }
}

/*
Calcular medidas em responsividade, o ideia é não utilizar pixels já que
pixel é um valor fixo,

medida alvo / medida atual do contexto
medida alvo / 16
32px / 16p = 2

*/